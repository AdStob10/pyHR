services:
  web:
    container_name: pyhr_web
    profiles: ["web","production"]
    build: ./pyHR-frontend
    environment:
      NODE_ENV: production
      ORIGIN: http://localhost:3000
      NODE_OPTIONS: --max_old-space-size=2048
      API_URL: "http://api:8000"
    image: pyhr/web:latest
    depends_on:
      - api
    ports:
      - "3000:3000"
    restart: unless-stopped

  api:
    container_name: pyhr_api
    profiles: ["api", "backend","production"]
    build: ./pyHR
    volumes:
      - ./pyHR/app:/code/app
    environment:
        DEBUG: 1
        WATCHFILES_FORCE_POLLING: true
        DB_URL: "postgresql://pyhr_api:pyhr123@db/pyhr"
        SECRET_KEY: "70d02e9318abac8edd40892fa455edc4e888678a8efdbff2c6bdceaaa4bc7b27"
        ACCESS_TOKEN_EXPIRE_MINUTES: 300
    image: pyhr/api:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    develop:
      watch:
        - action: sync
          path: ./app
          target: /code/app
    restart: on-failure

  db:
    container_name: pyhr_db
    image: postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "pyhr", "-U", "admin" ]
    profiles: ["database", "backend","production"]
    restart: always
    ports:
      - "5432:5432"
    environment:
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: admin123
        POSTGRES_DB: pyhr
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/db.sql
      - pgdata:/var/lib/postgresql/data

  pgadmin:
      container_name: pyhr_pgadmin
      image: dpage/pgadmin4:9.2.0
      profiles: ["database", "backend"]
      depends_on:
        - db
      ports:
        - "5050:5050"
      environment:
          PGADMIN_DEFAULT_EMAIL: admin@admin.com
          PGADMIN_DEFAULT_PASSWORD: admin123
          PGADMIN_LISTEN_PORT: 5050
      restart: unless-stopped
volumes:
  pgdata:
